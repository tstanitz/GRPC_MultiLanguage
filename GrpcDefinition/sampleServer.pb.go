// Code generated by protoc-gen-go. DO NOT EDIT.
// source: sampleServer.proto

/*
Package sampleServer is a generated protocol buffer package.

It is generated from these files:
	sampleServer.proto

It has these top-level messages:
	SampleResponse
	SampleRequest
*/
package sampleServer

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type SampleResponse struct {
	Salutation string `protobuf:"bytes,1,opt,name=salutation" json:"salutation,omitempty"`
}

func (m *SampleResponse) Reset()                    { *m = SampleResponse{} }
func (m *SampleResponse) String() string            { return proto.CompactTextString(m) }
func (*SampleResponse) ProtoMessage()               {}
func (*SampleResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *SampleResponse) GetSalutation() string {
	if m != nil {
		return m.Salutation
	}
	return ""
}

type SampleRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *SampleRequest) Reset()                    { *m = SampleRequest{} }
func (m *SampleRequest) String() string            { return proto.CompactTextString(m) }
func (*SampleRequest) ProtoMessage()               {}
func (*SampleRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *SampleRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func init() {
	proto.RegisterType((*SampleResponse)(nil), "SampleResponse")
	proto.RegisterType((*SampleRequest)(nil), "SampleRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for SalutationServer service

type SalutationServerClient interface {
	Salute(ctx context.Context, in *SampleRequest, opts ...grpc.CallOption) (*SampleResponse, error)
}

type salutationServerClient struct {
	cc *grpc.ClientConn
}

func NewSalutationServerClient(cc *grpc.ClientConn) SalutationServerClient {
	return &salutationServerClient{cc}
}

func (c *salutationServerClient) Salute(ctx context.Context, in *SampleRequest, opts ...grpc.CallOption) (*SampleResponse, error) {
	out := new(SampleResponse)
	err := grpc.Invoke(ctx, "/SalutationServer/Salute", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SalutationServer service

type SalutationServerServer interface {
	Salute(context.Context, *SampleRequest) (*SampleResponse, error)
}

func RegisterSalutationServerServer(s *grpc.Server, srv SalutationServerServer) {
	s.RegisterService(&_SalutationServer_serviceDesc, srv)
}

func _SalutationServer_Salute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SampleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SalutationServerServer).Salute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SalutationServer/Salute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SalutationServerServer).Salute(ctx, req.(*SampleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SalutationServer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "SalutationServer",
	HandlerType: (*SalutationServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Salute",
			Handler:    _SalutationServer_Salute_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sampleServer.proto",
}

func init() { proto.RegisterFile("sampleServer.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 156 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2a, 0x4e, 0xcc, 0x2d,
	0xc8, 0x49, 0x0d, 0x4e, 0x2d, 0x2a, 0x4b, 0x2d, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x57, 0x32,
	0xe0, 0xe2, 0x0b, 0x06, 0x8b, 0x06, 0xa5, 0x16, 0x17, 0xe4, 0xe7, 0x15, 0xa7, 0x0a, 0xc9, 0x71,
	0x71, 0x15, 0x27, 0xe6, 0x94, 0x96, 0x24, 0x96, 0x64, 0xe6, 0xe7, 0x49, 0x30, 0x2a, 0x30, 0x6a,
	0x70, 0x06, 0x21, 0x89, 0x28, 0x29, 0x73, 0xf1, 0xc2, 0x74, 0x14, 0x96, 0xa6, 0x16, 0x97, 0x08,
	0x09, 0x71, 0xb1, 0xe4, 0x25, 0xe6, 0xa6, 0x42, 0x95, 0x82, 0xd9, 0x46, 0xf6, 0x5c, 0x02, 0xc1,
	0x70, 0x2d, 0x10, 0x0b, 0x85, 0xb4, 0xb9, 0xd8, 0xc0, 0x62, 0xa9, 0x42, 0x7c, 0x7a, 0x28, 0x26,
	0x48, 0xf1, 0xeb, 0xa1, 0xba, 0x41, 0x89, 0xc1, 0x49, 0x70, 0x15, 0x13, 0x9f, 0x7b, 0x51, 0x41,
	0xb2, 0x4b, 0x6a, 0x5a, 0x66, 0x5e, 0x26, 0xc8, 0x94, 0x24, 0x36, 0xb0, 0x8b, 0x8d, 0x01, 0x01,
	0x00, 0x00, 0xff, 0xff, 0xb8, 0x19, 0xdf, 0xa7, 0xc7, 0x00, 0x00, 0x00,
}
